   structure  Mil =
    struct
     fun  num_compare v1 = 
      (fn  v2 =>
        if  (v1 = v2)
        then  Equal
         else  (if  (v1 < v2)
        then  Less
         else  Greater));

     fun  name_le v1 =  (fn  v2 => v1 <= v2);

     datatype mil_res =  Res_mem
    |  Res_reg
    |  Res_pc;

     datatype mil_e =  E_not (mil_e)
    |  E_comp (mil_e)
    |  E_sle (mil_e) (mil_e)
    |  E_le (mil_e) (mil_e)
    |  E_slt (mil_e) (mil_e)
    |  E_lt (mil_e) (mil_e)
    |  E_neq (mil_e) (mil_e)
    |  E_eq (mil_e) (mil_e)
    |  E_asr (mil_e) (mil_e)
    |  E_lsr (mil_e) (mil_e)
    |  E_lsl (mil_e) (mil_e)
    |  E_smod (mil_e) (mil_e)
    |  E_mod (mil_e) (mil_e)
    |  E_sdiv (mil_e) (mil_e)
    |  E_div (mil_e) (mil_e)
    |  E_mul (mil_e) (mil_e)
    |  E_sub (mil_e) (mil_e)
    |  E_add (mil_e) (mil_e)
    |  E_xor (mil_e) (mil_e)
    |  E_or (mil_e) (mil_e)
    |  E_and (mil_e) (mil_e)
    |  E_name (int)
    |  E_val (word64);

     datatype mil_op =  O_store (mil_res) (int) (int)
    |  O_load (mil_res) (int)
    |  O_internal (mil_e);

     datatype mil_i =  I_assign (int) (mil_e) (mil_op);

     fun  bound_name_instr v4 = 
      case  v4 of  (I_assign (v3)  (v2)  (v1)) =>  v3;

     fun  find_instr v4 v3 =
  case  v3
  of  []  =>  None
  |   v2::v1 =>  (if  ((bound_name_instr v2) = v4)
  then  ((Some (v2)))
  else  (find_instr v4 v1));

     val  val_false = (Word64.fromInt 0);

     val  val_true = (Word64.fromInt 1);

     val  val_zero = (Word64.fromInt 0);

     val  val_one = (Word64.fromInt 1);

     val  val_two = (Word64.fromInt 2);

     val  val_four = (Word64.fromInt 4);

     fun  addr_of_list v11 = 
      (fn  v12 =>
        case  (find_instr v12 v11)
        of  None =>  None
        |   (Some (v10)) =>  (case  v10
        of  ((I_assign (v9)  (v8)  (v7))) =>  (case  v7
        of  ((O_internal (v1))) =>  None
        |   ((O_load (v3)  (v2))) =>  (let val  x = (v3,v2)
        in
          (Some (x))
        end)
        |   ((O_store (v6)  (v5)  (v4))) =>  (let val  x = (v6,v5)
        in
          (Some (x))
        end))));

     fun  str_may_list_find_cake v17 v18 v19 v20 v21 v22 =
  case  v18
  of  []  =>  []
   |   v16::v15 =>  (case  v16
  of  ((I_assign (v14)  (v13)  (v12))) =>  (case  v12
  of  ((O_internal (v1))) =>  (str_may_list_find_cake v17 v15 v19 v20 v21 v22)
  |   ((O_load (v3)  (v2))) =>  (str_may_list_find_cake v17 v15 v19 v20 v21 v22)
  |   ((O_store (v11)  (v10)  (v9))) =>  (case  (Map.lookup v19 v10)
  of  None =>  (if  ((v14 >= v20) orelse  ((v11 = v21) = (0 < 0)))
  then  (str_may_list_find_cake v17 v15 v19 v20 v21 v22)
  else  (case  (v17 v13 v19)
  of  None =>  ((I_assign (v14)  (v13)  ((O_store (v11)  (v10)  (v9))))::(str_may_list_find_cake v17 v15 v19 v20 v21 v22))
  |   ((Some (v4))) =>  (if  ((v4 = val_false) = (0 < 0))
  then  ((I_assign (v14)  (v13)  ((O_store (v11)  (v10)  (v9))))::(str_may_list_find_cake v17 v15 v19 v20 v21 v22))
  else  (str_may_list_find_cake v17 v15 v19 v20 v21 v22))))
  |   ((Some (v8))) =>  (case  (Map.lookup v19 v22)
  of  None =>  (if  ((v14 >= v20) orelse  ((v11 = v21) = (0 < 0)))
  then  (str_may_list_find_cake v17 v15 v19 v20 v21 v22)
  else  (case  (v17 v13 v19)
  of  None =>  ((I_assign (v14)  (v13)  ((O_store (v11)  (v10)  (v9))))::(str_may_list_find_cake v17 v15 v19 v20 v21 v22))
  |   ((Some (v5))) =>  (if  ((v5 = val_false) = (0 < 0))
  then  ((I_assign (v14)  (v13)  ((O_store (v11)  (v10)  (v9))))::(str_may_list_find_cake v17 v15 v19 v20 v21 v22))
  else  (str_may_list_find_cake v17 v15 v19 v20 v21 v22))))
  |   ((Some (v7))) =>  (if  ((v14 >= v20) orelse  (((v11 = v21) = (0 < 0)) orelse  ((v8 = v7) = (0 < 0))))
  then  (str_may_list_find_cake v17 v15 v19 v20 v21 v22)
  else  (case  (v17 v13 v19)
  of  None =>  ((I_assign (v14)  (v13)  ((O_store (v11)  (v10)  (v9))))::(str_may_list_find_cake v17 v15 v19 v20 v21 v22))
  |   ((Some (v6))) =>  (if  ((v6 = val_false) = (0 < 0))
  then  ((I_assign (v14)  (v13)  ((O_store (v11)  (v10)  (v9))))::(str_may_list_find_cake v17 v15 v19 v20 v21 v22))
  else  (str_may_list_find_cake v17 v15 v19 v20 v21 v22))))))));

     datatype milCake_State_list_cake =  State_st_list_cake (mil_i list) ((int ,  word64) Map.map) (int list) (int list);

     fun  str_may_list_cake v10 = 
      (fn  v11 =>
        (fn  v12 =>
          case  (v11,v12)
          of  (v9,v8) =>  (case  v9
          of  ((State_st_list_cake (v7)  (v6)  (v5)  (v4))) =>  (case  (addr_of_list v7 v8)
          of  None =>  []
           |   ((Some (v3))) =>  (case  v3
          of  (v2,v1) =>  (str_may_list_find_cake v10 v7 v6 v8 v2 v1))))));

     fun  str_act_list_cond_cake v17 v18 v19 v20 v21 v22 v23 =
  case  v18
  of  []  =>  []
   |   v16::v15 =>  (case  v16
  of  ((I_assign (v14)  (v13)  (v12))) =>  (case  v12
  of  ((O_internal (v1))) =>  (str_act_list_cond_cake v17 v15 v19 v20 v21 v22 v23)
  |   ((O_load (v3)  (v2))) =>  (str_act_list_cond_cake v17 v15 v19 v20 v21 v22 v23)
  |   ((O_store (v11)  (v10)  (v9))) =>  (case  (v17 v13 v19)
  of  None =>  (str_act_list_cond_cake v17 v15 v19 v20 v21 v22 v23)
  |   ((Some (v8))) =>  (case  (Map.lookup v19 v10)
  of  None =>  (str_act_list_cond_cake v17 v15 v19 v20 v21 v22 v23)
  |   ((Some (v7))) =>  (case  (Map.lookup v19 v22)
  of  None =>  (case  (Map.lookup v19 v23)
  of  None =>  (str_act_list_cond_cake v17 v15 v19 v20 v21 v22 v23)
  |   ((Some (v4))) =>  (if  ((((v14 > v20) andalso  (v11 = v21)) andalso  ((v8 = val_false) = (0 < 0))) andalso  (v7 = v4))
  then  ((I_assign (v14)  (v13)  ((O_store (v11)  (v10)  (v9))))::(str_act_list_cond_cake v17 v15 v19 v20 v21 v22 v23))
  else  (str_act_list_cond_cake v17 v15 v19 v20 v21 v22 v23)))
  |   ((Some (v6))) =>  (case  (Map.lookup v19 v23)
  of  None =>  (if  ((((v14 > v20) andalso  (v11 = v21)) andalso  ((v8 = val_false) = (0 < 0))) andalso  (v7 = v6))
  then  ((I_assign (v14)  (v13)  ((O_store (v11)  (v10)  (v9))))::(str_act_list_cond_cake v17 v15 v19 v20 v21 v22 v23))
  else  (str_act_list_cond_cake v17 v15 v19 v20 v21 v22 v23))
  |   ((Some (v5))) =>  (if  ((((v14 > v20) andalso  (v11 = v21)) andalso  ((v8 = val_false) = (0 < 0))) andalso  ((v7 = v6) orelse  (v7 = v5)))
  then  ((I_assign (v14)  (v13)  ((O_store (v11)  (v10)  (v9))))::(str_act_list_cond_cake v17 v15 v19 v20 v21 v22 v23))
  else  (str_act_list_cond_cake v17 v15 v19 v20 v21 v22 v23))))))));

     fun  str_act_list_find_cake v14 v15 v16 v17 v18 v19 =
  case  v15
  of  []  =>  []
   |   v13::v12 =>  (case  v13
  of  ((I_assign (v11)  (v10)  (v9))) =>  (case  v9
  of  ((O_internal (v1))) =>  (str_act_list_find_cake v14 v12 v16 v17 v18 v19)
  |   ((O_load (v3)  (v2))) =>  (str_act_list_find_cake v14 v12 v16 v17 v18 v19)
  |   ((O_store (v8)  (v7)  (v6))) =>  (case  (str_act_list_cond_cake v14 v19 v16 v11 v8 v7 v18)
  of  []  =>  (if  ((v8 = v17) = (0 < 0))
  then  (str_act_list_find_cake v14 v12 v16 v17 v18 v19)
  else  ((I_assign (v11)  (v10)  ((O_store (v8)  (v7)  (v6))))::(str_act_list_find_cake v14 v12 v16 v17 v18 v19)))
  |   (v5::v4) =>  (str_act_list_find_cake v14 v12 v16 v17 v18 v19))));

     fun  str_act_list_cake v11 = 
      (fn  v12 =>
        (fn  v13 =>
          case  (v12,v13)
          of  (v10,v9) =>  (case  v10
          of  ((State_st_list_cake (v8)  (v7)  (v6)  (v5))) =>  (case  (addr_of_list v8 v9)
          of  None =>  []
           |   ((Some (v4))) =>  (case  v4
          of  (v3,v2) =>  (let val  v1 =
            str_may_list_cake v11 ((State_st_list_cake (v8)  (v7)  (v6)  (v5))) v9
           in
            str_act_list_find_cake v11 v1 v7 v3 v2 v1
           end))))));

     fun  bound_names_program_list v1 =  List.map bound_name_instr v1;

     datatype mil_obs =  Obs_il (word64)
    |  Obs_ds (word64)
    |  Obs_dl (word64)
    |  Obs_internal;

     fun  sem_instr_exe_cake v53 = 
      (fn  v54 =>
        (fn  v55 =>
          case  (v54,v55)
          of  (v52,v51) =>  (case  v52
          of  ((I_assign (v50)  (v49)  (v48))) =>  (case  v48
          of  ((O_internal (v6))) =>  (case  v51
          of  ((State_st_list_cake (v5)  (v4)  (v3)  (v2))) =>  (case  (v53 v6 v4)
          of  None =>  None
          |   ((Some (v1))) =>  (let val  x = (v1,Obs_internal)
          in
            (Some (x))
          end)))
          |   ((O_load (v38)  (v37))) =>  (case  v38
          of  Res_pc =>  (case  v51
          of  ((State_st_list_cake (v16)  (v15)  (v14)  (v13))) =>  (case  (bound_names_program_list (str_act_list_cake v53 ((State_st_list_cake (v16)  (v15)  (v14)  (v13))) v50))
          of  []  =>  None
          |   (v12::v11) =>  (case  v11
          of  []  =>  (case  (Map.lookup v15 v37)
          of  None =>  None
          |   ((Some (v8))) =>  (case  (Map.lookup v15 v12)
          of  None =>  None
          |   ((Some (v7))) =>  (let val  x = (v7,Obs_internal)
          in
            (Some (x))
          end)))
          |   (v10::v9) =>  None)))
          |   Res_reg =>  (case  v51
          of  ((State_st_list_cake (v26)  (v25)  (v24)  (v23))) =>  (case  (bound_names_program_list (str_act_list_cake v53 ((State_st_list_cake (v26)  (v25)  (v24)  (v23))) v50))
          of  []  =>  None
          |   (v22::v21) =>  (case  v21
          of  []  =>  (case  (Map.lookup v25 v37)
          of  None =>  None
          |   ((Some (v18))) =>  (case  (Map.lookup v25 v22)
          of  None =>  None
          |   ((Some (v17))) =>  (let val  x = (v17,Obs_internal)
          in
            (Some (x))
          end)))
          |   (v20::v19) =>  None)))
          |   Res_mem =>  (case  v51
          of  ((State_st_list_cake (v36)  (v35)  (v34)  (v33))) =>  (case  (bound_names_program_list (str_act_list_cake v53 ((State_st_list_cake (v36)  (v35)  (v34)  (v33))) v50))
          of  []  =>  None
          |   (v32::v31) =>  (case  v31
          of  []  =>  (case  (Map.lookup v35 v37)
          of  None =>  None
          |   ((Some (v28))) =>  (case  (Map.lookup v35 v32)
          of  None =>  None
          |   ((Some (v27))) =>  (if  (List.member v32 v34)
          then  (let val  x = (v27,(Obs_dl (v28)))
          in
            (Some (x))
          end)
          else  (let val  x = (v27,Obs_internal)
          in
            (Some (x))
          end))))
          |   (v30::v29) =>  None))))
          |   ((O_store (v47)  (v46)  (v45))) =>  (case  v51
          of  ((State_st_list_cake (v44)  (v43)  (v42)  (v41))) =>  (case  (Map.lookup v43 v45)
          of  None =>  None
          |   ((Some (v40))) =>  (case  (Map.lookup v43 v46)
          of  None =>  None
          |   ((Some (v39))) =>  (let val  x = (v40,Obs_internal)
          in
            (Some (x))
          end))))))));

     fun  completed_list_cake v16 = 
      (fn  v17 =>
        (fn  v18 =>
          case  (v17,v18)
          of  (v15,v14) =>  (case  v15
          of  ((State_st_list_cake (v13)  (v12)  (v11)  (v10))) =>  (case  v14
          of  ((I_assign (v9)  (v8)  (v7))) =>  (case  v7
          of  ((O_internal (v1))) =>  (if  ((Map.lookup v12 v9) = None)
          then  ((v16 v8 v12) = ((Some (val_false))))
          else  (0 <= 0))
          |   ((O_load (v3)  (v2))) =>  (if  ((Map.lookup v12 v9) = None)
          then  ((v16 v8 v12) = ((Some (val_false))))
          else  (0 <= 0))
          |   ((O_store (v6)  (v5)  (v4))) =>  (case  v6
          of  Res_pc =>  (((v16 v8 v12) = ((Some (val_false)))) orelse  (List.member v9 v10))
          |   Res_reg =>  (if  ((Map.lookup v12 v9) = None)
          then  ((v16 v8 v12) = ((Some (val_false))))
          else  (0 <= 0))
          |   Res_mem =>  (((v16 v8 v12) = ((Some (val_false)))) orelse  (List.member v9 v11))))))));

     fun  max_bound_name_list v3 = 
      List.foldl (fn  v2 =>
        (fn  v1 =>
          (if  (name_le v2 (bound_name_instr v1))
          then  (bound_name_instr v1)
          else  v2))) 0 v3;

     fun  names_e_list v43 =
  case  v43
  of  (E_val (v1)) =>  []
   |   (E_name (v2)) =>  (v2::[] )
  |   (E_and (v4)  (v3)) =>  ((names_e_list v4) @ (names_e_list v3))
  |   (E_or (v6)  (v5)) =>  ((names_e_list v6) @ (names_e_list v5))
  |   (E_xor (v8)  (v7)) =>  ((names_e_list v8) @ (names_e_list v7))
  |   (E_add (v10)  (v9)) =>  ((names_e_list v10) @ (names_e_list v9))
  |   (E_sub (v12)  (v11)) =>  ((names_e_list v12) @ (names_e_list v11))
  |   (E_mul (v14)  (v13)) =>  ((names_e_list v14) @ (names_e_list v13))
  |   (E_div (v16)  (v15)) =>  ((names_e_list v16) @ (names_e_list v15))
  |   (E_sdiv (v18)  (v17)) =>  ((names_e_list v18) @ (names_e_list v17))
  |   (E_mod (v20)  (v19)) =>  ((names_e_list v20) @ (names_e_list v19))
  |   (E_smod (v22)  (v21)) =>  ((names_e_list v22) @ (names_e_list v21))
  |   (E_lsl (v24)  (v23)) =>  ((names_e_list v24) @ (names_e_list v23))
  |   (E_lsr (v26)  (v25)) =>  ((names_e_list v26) @ (names_e_list v25))
  |   (E_asr (v28)  (v27)) =>  ((names_e_list v28) @ (names_e_list v27))
  |   (E_eq (v30)  (v29)) =>  ((names_e_list v30) @ (names_e_list v29))
  |   (E_neq (v32)  (v31)) =>  ((names_e_list v32) @ (names_e_list v31))
  |   (E_lt (v34)  (v33)) =>  ((names_e_list v34) @ (names_e_list v33))
  |   (E_slt (v36)  (v35)) =>  ((names_e_list v36) @ (names_e_list v35))
  |   (E_le (v38)  (v37)) =>  ((names_e_list v38) @ (names_e_list v37))
  |   (E_sle (v40)  (v39)) =>  ((names_e_list v40) @ (names_e_list v39))
  |   (E_comp (v41)) =>  (names_e_list v41)
  |   (E_not (v42)) =>  (names_e_list v42);

     datatype milExecutableUtility_act_list =  Act_ftc_list (mil_i list)
    |  Act_cmt_list (word64) (word64)
    |  Act_exe_list;

     datatype milExecutableUtility_ll =  Ll_lb (mil_obs) (milExecutableUtility_act_list) (int);

     fun  obs_of_ll v4 =  case  v4 of  (Ll_lb (v3)  (v2)  (v1)) =>  v3;

     fun  obs_visible v4 = 
      case  v4
      of  Obs_internal =>  (0 < 0)
      |   (Obs_dl (v1)) =>  (0 <= 0)
      |   (Obs_ds (v2)) =>  (0 <= 0)
      |   (Obs_il (v3)) =>  (0 <= 0);

     val  empty_state_list_cake =
      (State_st_list_cake ([] )  (Map.empty num_compare)  ([] )  ([] ));

     fun  instrs_completed_store_list v2 = 
      (fn  v1 =>
        (fn  v6 =>
          (fn  v3 =>
            (fn  v4 =>
              (fn  v5 =>
                (I_assign (v3)  ((E_val (val_true)))  ((O_internal ((E_val (v1))))))::(I_assign (v4)  ((E_val (val_true)))  ((O_internal ((E_val (v6))))))::(I_assign (v5)  ((E_val (val_true)))  ((O_store (v2)  (v3)  (v4))))::[] )))));

     fun  initialize_resource_at_list_cake v39 = 
      (fn  v40 =>
        (fn  v41 =>
          (fn  v42 =>
            (fn  v43 =>
              (fn  v44 =>
                (fn  v45 =>
                  case  v39
                  of  (State_st_list_cake (v38)  (v37)  (v36)  (v35)) =>  (case  (v40,(v41,(v42,(v43,(v44,v45)))))
                  of  (v34,v33) =>  (case  v34
                  of  Res_pc =>  (case  v33
                  of  (v11,v10) =>  (case  v10
                  of  (v9,v8) =>  (case  v8
                  of  (v7,v6) =>  (case  v6
                  of  (v5,v4) =>  (let val  v3 =
                    v38 @ (instrs_completed_store_list Res_pc val_zero v9 v7 v5 v4)
                      val  v2 =
                    Map.insert (Map.insert (Map.insert v37 v7 val_zero) v5 v9) v4 v9
                      val  v1 = v4::v35
                   in
                    (State_st_list_cake (v3)  (v2)  (v36)  (v1))
                  end)))))
                  |   Res_reg =>  (case  v33
                  of  (v21,v20) =>  (case  v20
                  of  (v19,v18) =>  (case  v18
                  of  (v17,v16) =>  (case  v16
                  of  (v15,v14) =>  (let val  v13 =
                    v38 @ (instrs_completed_store_list Res_reg v21 v19 v17 v15 v14)
                      val  v12 =
                    Map.insert (Map.insert (Map.insert v37 v17 v21) v15 v19) v14 v19
                   in
                    (State_st_list_cake (v13)  (v12)  (v36)  (v35))
                  end)))))
                  |   Res_mem =>  (case  v33
                  of  (v32,v31) =>  (case  v31
                  of  (v30,v29) =>  (case  v29
                  of  (v28,v27) =>  (case  v27
                  of  (v26,v25) =>  (let val  v24 =
                    v38 @ (instrs_completed_store_list Res_mem v32 v30 v28 v26 v25)
                      val  v23 =
                    Map.insert (Map.insert (Map.insert v37 v28 v32) v26 v30) v25 v30
                      val  v22 = v25::v36
                   in
                    (State_st_list_cake (v24)  (v23)  (v22)  (v35))
                  end)))))))))))));

     fun  initialize_pc_without_fetch_at_list_cake v15 = 
      (fn  v16 =>
        (fn  v17 =>
          (fn  v18 =>
            (fn  v19 =>
              (fn  v20 =>
                case  v15
                of  (State_st_list_cake (v14)  (v13)  (v12)  (v11)) =>  (case  (v16,(v17,(v18,(v19,v20))))
                of  (v10,v9) =>  (case  v9
                of  (v8,v7) =>  (case  v7
                of  (v6,v5) =>  (case  v5
                of  (v4,v3) =>  (let val  v2 =
                  v14 @ (instrs_completed_store_list Res_pc val_zero v8 v6 v4 v3)
                    val  v1 =
                  Map.insert (Map.insert (Map.insert v13 v6 val_zero) v4 v8) v3 v8
                 in
                  (State_st_list_cake (v2)  (v1)  (v12)  (v11))
                end))))))))));

     fun  init_res_val_list_cake v10 = 
      (fn  v11 =>
        (fn  v12 =>
          case  (v11,v12)
          of  (v9,v8) =>  (case  v9
          of  (v7,v6) =>  (case  v8
          of  (v5,v4) =>  (let val  v3 = v6 + 1
              val  v2 = v3 + 1
              val  v1 = v2 + 1
           in
            (initialize_resource_at_list_cake v7 v10 v5 v4 v3 v2 v1,v1)
          end)))));

     fun  init_pc_without_fetch_val_list_cake v8 = 
      (fn  v9 =>
        case  v8
        of  (v7,v6) =>  (case  v9
        of  (v5,v4) =>  (let val  v3 = v6 + 1
            val  v2 = v3 + 1
            val  v1 = v2 + 1
         in
          (initialize_pc_without_fetch_at_list_cake v7 v5 v4 v3 v2 v1,v1)
        end)));

     fun  init_res_list_cake v2 = 
      (fn  v3 =>
        (fn  v4 =>
          (fn  v1 => List.foldl (init_res_val_list_cake v2) (v3,v4) v1)));

     fun  initialize_state_list_cake v13 = 
      (fn  v15 =>
        (fn  v14 =>
          let val  v12 = (empty_state_list_cake,0)
          in
            case  v12
          of  (v11,v10) =>  (let val  v9 =
            init_res_list_cake Res_mem v11 v10 v13
           in
            case  v9
          of  (v8,v7) =>  (let val  v6 = init_res_list_cake Res_reg v8 v7 v15
           in
            case  v6
          of  (v5,v4) =>  (let val  v3 =
            init_res_val_list_cake Res_pc (v5,v4) (val_zero,v14)
          in
            case  v3 of  (v2,v1) =>  (v2,v1)
          end)
          end)
          end)
          end));

     fun  initialize_state_without_pc_fetch_list_cake v13 = 
      (fn  v15 =>
        (fn  v14 =>
          let val  v12 = (empty_state_list_cake,0)
          in
            case  v12
          of  (v11,v10) =>  (let val  v9 =
            init_res_list_cake Res_mem v11 v10 v13
           in
            case  v9
          of  (v8,v7) =>  (let val  v6 = init_res_list_cake Res_reg v8 v7 v15
           in
            case  v6
          of  (v5,v4) =>  (let val  v3 =
            init_pc_without_fetch_val_list_cake (v5,v4) (val_zero,v14)
          in
            case  v3 of  (v2,v1) =>  (v2,v1)
          end)
          end)
          end)
          end));

     fun  string_app_list_of_res v1 = 
      case  v1
      of  Res_pc =>  ((List ("PC"::[] )))
      |   Res_reg =>  ((List ("REG"::[] )))
      |   Res_mem =>  ((List ("MEM"::[] )));

     fun  string_app_paren_binop v4 = 
      (fn  v5 =>
        (fn  v6 =>
          let val  v3 = (List ("("::[] ))
              val  v2 = (List (" "::v5::" "::[] ))
              val  v1 = (List (")"::[] ))
          in
            (Append ((Append ((Append ((Append (v3)  (v4)))  (v2)))  (v6)))  (v1))
          end));

     fun  string_app_paren_unop v4 = 
      (fn  v5 =>
        let val  v3 = (List ("("::[] ))
            val  v2 = (List (v4::" "::[] ))
            val  v1 = (List (")"::[] ))
        in
          (Append ((Append ((Append (v3)  (v2)))  (v5)))  (v1))
        end);

     fun  string_app_list_of_e v43 =
  case  v43
  of  (E_val (v1)) =>  (PrettyPrinter.fromWord64 v1)
  |   (E_name (v2)) =>  (PrettyPrinter.fromNum v2)
  |   (E_and (v4)  (v3)) =>  (string_app_paren_binop (string_app_list_of_e v4) "&&" (string_app_list_of_e v3))
  |   (E_or (v6)  (v5)) =>  (string_app_paren_binop (string_app_list_of_e v6) "||" (string_app_list_of_e v5))
  |   (E_xor (v8)  (v7)) =>  (string_app_paren_binop (string_app_list_of_e v8) "^" (string_app_list_of_e v7))
  |   (E_add (v10)  (v9)) =>  (string_app_paren_binop (string_app_list_of_e v10) "+" (string_app_list_of_e v9))
  |   (E_sub (v12)  (v11)) =>  (string_app_paren_binop (string_app_list_of_e v12) "-" (string_app_list_of_e v11))
  |   (E_mul (v14)  (v13)) =>  (string_app_paren_binop (string_app_list_of_e v14) "*" (string_app_list_of_e v13))
  |   (E_div (v16)  (v15)) =>  (string_app_paren_binop (string_app_list_of_e v16) "//" (string_app_list_of_e v15))
  |   (E_sdiv (v18)  (v17)) =>  (string_app_paren_binop (string_app_list_of_e v18) "/" (string_app_list_of_e v17))
  |   (E_mod (v20)  (v19)) =>  (string_app_paren_binop (string_app_list_of_e v20) "mod" (string_app_list_of_e v19))
  |   (E_smod (v22)  (v21)) =>  (string_app_paren_binop (string_app_list_of_e v22) "smod" (string_app_list_of_e v21))
  |   (E_lsl (v24)  (v23)) =>  (string_app_paren_binop (string_app_list_of_e v24) "<<" (string_app_list_of_e v23))
  |   (E_lsr (v26)  (v25)) =>  (string_app_paren_binop (string_app_list_of_e v26) ">>" (string_app_list_of_e v25))
  |   (E_asr (v28)  (v27)) =>  (string_app_paren_binop (string_app_list_of_e v28) "->>" (string_app_list_of_e v27))
  |   (E_eq (v30)  (v29)) =>  (string_app_paren_binop (string_app_list_of_e v30) "==" (string_app_list_of_e v29))
  |   (E_neq (v32)  (v31)) =>  (string_app_paren_binop (string_app_list_of_e v32) "!=" (string_app_list_of_e v31))
  |   (E_lt (v34)  (v33)) =>  (string_app_paren_binop (string_app_list_of_e v34) "<" (string_app_list_of_e v33))
  |   (E_slt (v36)  (v35)) =>  (string_app_paren_binop (string_app_list_of_e v36) "-<" (string_app_list_of_e v35))
  |   (E_le (v38)  (v37)) =>  (string_app_paren_binop (string_app_list_of_e v38) "<=" (string_app_list_of_e v37))
  |   (E_sle (v40)  (v39)) =>  (string_app_paren_binop (string_app_list_of_e v40) "-<=" (string_app_list_of_e v39))
  |   (E_comp (v41)) =>  (string_app_paren_unop "~" (string_app_list_of_e v41))
  |   (E_not (v42)) =>  (string_app_paren_unop "!" (string_app_list_of_e v42));

     fun  string_app_list_of_o v15 = 
      case  v15
      of  (O_internal (v1)) =>  (string_app_list_of_e v1)
      |   (O_load (v7)  (v6)) =>  (let val  v5 = (List ("load"::"("::[] ))
          val  v4 = string_app_list_of_res v7
          val  v3 = (List (","::[] ))
          val  v2 = (List (")"::[] ))
      in
        (Append ((Append ((Append ((Append (v5)  (v4)))  (v3)))  (PrettyPrinter.fromNum v6)))  (v2))
      end)
      |   (O_store (v14)  (v13)  (v12)) =>  (let val  v11 =
        (List ("store"::"("::[] ))
          val  v10 = string_app_list_of_res v14
          val  v9 = (List (","::[] ))
          val  v8 = (List (")"::[] ))
      in
        (Append ((Append ((Append ((Append ((Append ((Append (v11)  (v10)))  (v9)))  (PrettyPrinter.fromNum v13)))  (v9)))  (PrettyPrinter.fromNum v12)))  (v8))
      end);

     fun  string_app_list_of_i v6 = 
      case  v6
      of  (I_assign (v5)  (v4)  (v3)) =>  (let val  v2 = (List (" = "::[] ))
          val  v1 = (List (" ? "::[] ))
      in
        (Append ((Append ((Append ((Append (PrettyPrinter.fromNum v5)  (v2)))  (string_app_list_of_e v4)))  (v1)))  (string_app_list_of_o v3))
      end);

     fun  string_app_list_of_obs v4 = 
      case  v4
      of  Obs_internal =>  ((List ("internal"::[] )))
      |   (Obs_dl (v1)) =>  ((Append ((List ("dl "::[] )))  (PrettyPrinter.fromWord64 v1)))
      |   (Obs_ds (v2)) =>  ((Append ((List ("ds "::[] )))  (PrettyPrinter.fromWord64 v2)))
      |   (Obs_il (v3)) =>  ((Append ((List ("il "::[] )))  (PrettyPrinter.fromWord64 v3)));

     fun  word_2comp_cake v1 = 
      Word64.fromInt( (let val  k = (exp 2 64) - (Word64.toInt( v1))
      in
        if  (k < 0)
      then  0
       else  k
       end));

     fun  i2w_cake v1 = 
      if  (v1 < 0)
      then  (word_2comp_cake (Word64.fromInt( (0 - v1))))
      else  (Word64.fromInt( v1));

     fun  word_msb_cake v1 = 
      (Word64.andb (Word64.fromInt 9223372036854775808) v1) = (Word64.fromInt 9223372036854775808);

     fun  w2i_cake v1 = 
      if  (word_msb_cake v1)
      then  (0 - (Word64.toInt( (word_2comp_cake v1))))
      else  (Word64.toInt( v1));

     fun  mod_2exp v2 =  (fn  v1 => v1 mod (exp 2 v2));

     fun  div_2exp v2 =  (fn  v1 => v1 div (exp 2 v2));

     fun  bits v1 = 
      (fn  v2 =>
        (fn  v3 =>
          mod_2exp (let val  k = (v1 + 1) - v2
           in
            if  (k < 0)
          then  0
           else  k
           end) (div_2exp v2 v3)));

     fun  bit v1 =  (fn  v2 => (bits v1 v1 v2) = 1);

     fun  nzcv_cake v3 = 
      (fn  v4 =>
        let val  v2 = (Word64.toInt( v3)) + (Word64.toInt( (word_2comp_cake v4)))
            val  v1 = Word64.fromInt( v2)
        in
          (word_msb_cake v1,(v1 = (Word64.fromInt 0),((bit 64 v2) orelse  (v4 = (Word64.fromInt 0)),(((word_msb_cake v3) = (word_msb_cake v4)) = (0 < 0)) andalso  (((word_msb_cake v1) = (word_msb_cake v3)) = (0 < 0)))))
        end);

     fun  v_and_cake v1 =  (fn  v2 => Word64.andb v1 v2);

     fun  v_or_cake v1 =  (fn  v2 => Word64.orb v1 v2);

     fun  v_xor_cake v1 =  (fn  v2 => Word64.xorb v1 v2);

     fun  v_add_cake v1 =  (fn  v2 => Word64.+ v1 v2);

     fun  v_sub_cake v1 =  (fn  v2 => Word64.- v1 v2);

     fun  v_mul_cake v1 = 
      (fn  v2 => Word64.fromInt( ((Word64.toInt( v1)) * (Word64.toInt( v2)))));

     fun  v_div_cake v1 = 
      (fn  v2 => Word64.fromInt( ((Word64.toInt( v1)) div (Word64.toInt( v2)))));

     fun  v_sdiv_cake v1 = 
      (fn  v2 => i2w_cake ((w2i_cake v1) div (w2i_cake v2)));

     fun  v_mod_cake v1 = 
      (fn  v2 => Word64.fromInt( ((Word64.toInt( v1)) mod (Word64.toInt( v2)))));

     fun  v_smod_cake v1 = 
      (fn  v2 => i2w_cake ((w2i_cake v1) mod (w2i_cake v2)));

     fun  v_lsl_cake v1 =  (fn  v2 => Word64.<< v1 (Word64.toInt( v2)));

     fun  v_lsr_cake v1 =  (fn  v2 => Word64.>> v1 (Word64.toInt( v2)));

     fun  v_asr_cake v1 =  (fn  v2 => Word64.~>> v1 (Word64.toInt( v2)));

     fun  v_eq_cake v1 = 
      (fn  v2 =>
        if  (v1 = v2)
        then  val_true
         else  val_false);

     fun  v_neq_cake v1 = 
      (fn  v2 =>
        if  (v1 = v2)
        then  val_false
         else  val_true);

     fun  v_lt_cake v10 = 
      (fn  v9 =>
        let val  v1 =
          let val  v8 = nzcv_cake v10 v9
           in
            case  v8
          of  (v7,v6) =>  (case  v6
          of  (v5,v4) =>  (case  v4 of  (v3,v2) =>  (v3 = (0 < 0))))
          end
         in
          if  v1
         then  val_true
         else  val_false
         end);

     fun  v_slt_cake v10 = 
      (fn  v9 =>
        let val  v1 =
          let val  v8 = nzcv_cake v10 v9
           in
            case  v8
          of  (v7,v6) =>  (case  v6
          of  (v5,v4) =>  (case  v4 of  (v3,v2) =>  ((v7 = v2) = (0 < 0))))
          end
         in
          if  v1
         then  val_true
         else  val_false
         end);

     fun  v_le_cake v10 = 
      (fn  v9 =>
        let val  v1 =
          let val  v8 = nzcv_cake v10 v9
           in
            case  v8
          of  (v7,v6) =>  (case  v6
          of  (v5,v4) =>  (case  v4
          of  (v3,v2) =>  ((v3 = (0 < 0)) orelse  v5)))
          end
         in
          if  v1
         then  val_true
         else  val_false
         end);

     fun  v_sle_cake v10 = 
      (fn  v9 =>
        let val  v1 =
          let val  v8 = nzcv_cake v10 v9
           in
            case  v8
          of  (v7,v6) =>  (case  v6
          of  (v5,v4) =>  (case  v4
          of  (v3,v2) =>  (v5 orelse  ((v7 = v2) = (0 < 0)))))
          end
         in
          if  v1
         then  val_true
         else  val_false
         end);

     fun  v_comp_cake v1 =  Word64.notb v1;

     fun  v_not_cake v1 = 
      if  (v1 = val_false)
      then  val_true
       else  val_false;

     fun  sem_expr_exe_cake v83 v84 =
  case  v83
  of  (E_val (v1)) =>  ((Some (v1)))
  |   (E_name (v2)) =>  (Map.lookup v84 v2)
  |   (E_and (v6)  (v5)) =>  (case  (sem_expr_exe_cake v6 v84)
  of  None =>  None
  |   ((Some (v4))) =>  (case  (sem_expr_exe_cake v5 v84)
  of  None =>  None
  |   ((Some (v3))) =>  ((Some (v_and_cake v4 v3)))))
  |   (E_or (v10)  (v9)) =>  (case  (sem_expr_exe_cake v10 v84)
  of  None =>  None
  |   ((Some (v8))) =>  (case  (sem_expr_exe_cake v9 v84)
  of  None =>  None
  |   ((Some (v7))) =>  ((Some (v_or_cake v8 v7)))))
  |   (E_xor (v14)  (v13)) =>  (case  (sem_expr_exe_cake v14 v84)
  of  None =>  None
  |   ((Some (v12))) =>  (case  (sem_expr_exe_cake v13 v84)
  of  None =>  None
  |   ((Some (v11))) =>  ((Some (v_xor_cake v12 v11)))))
  |   (E_add (v18)  (v17)) =>  (case  (sem_expr_exe_cake v18 v84)
  of  None =>  None
  |   ((Some (v16))) =>  (case  (sem_expr_exe_cake v17 v84)
  of  None =>  None
  |   ((Some (v15))) =>  ((Some (v_add_cake v16 v15)))))
  |   (E_sub (v22)  (v21)) =>  (case  (sem_expr_exe_cake v22 v84)
  of  None =>  None
  |   ((Some (v20))) =>  (case  (sem_expr_exe_cake v21 v84)
  of  None =>  None
  |   ((Some (v19))) =>  ((Some (v_sub_cake v20 v19)))))
  |   (E_mul (v26)  (v25)) =>  (case  (sem_expr_exe_cake v26 v84)
  of  None =>  None
  |   ((Some (v24))) =>  (case  (sem_expr_exe_cake v25 v84)
  of  None =>  None
  |   ((Some (v23))) =>  ((Some (v_mul_cake v24 v23)))))
  |   (E_div (v30)  (v29)) =>  (case  (sem_expr_exe_cake v30 v84)
  of  None =>  None
  |   ((Some (v28))) =>  (case  (sem_expr_exe_cake v29 v84)
  of  None =>  None
  |   ((Some (v27))) =>  ((Some (v_div_cake v28 v27)))))
  |   (E_sdiv (v34)  (v33)) =>  (case  (sem_expr_exe_cake v34 v84)
  of  None =>  None
  |   ((Some (v32))) =>  (case  (sem_expr_exe_cake v33 v84)
  of  None =>  None
  |   ((Some (v31))) =>  ((Some (v_sdiv_cake v32 v31)))))
  |   (E_mod (v38)  (v37)) =>  (case  (sem_expr_exe_cake v38 v84)
  of  None =>  None
  |   ((Some (v36))) =>  (case  (sem_expr_exe_cake v37 v84)
  of  None =>  None
  |   ((Some (v35))) =>  ((Some (v_mod_cake v36 v35)))))
  |   (E_smod (v42)  (v41)) =>  (case  (sem_expr_exe_cake v42 v84)
  of  None =>  None
  |   ((Some (v40))) =>  (case  (sem_expr_exe_cake v41 v84)
  of  None =>  None
  |   ((Some (v39))) =>  ((Some (v_smod_cake v40 v39)))))
  |   (E_lsl (v46)  (v45)) =>  (case  (sem_expr_exe_cake v46 v84)
  of  None =>  None
  |   ((Some (v44))) =>  (case  (sem_expr_exe_cake v45 v84)
  of  None =>  None
  |   ((Some (v43))) =>  ((Some (v_lsl_cake v44 v43)))))
  |   (E_lsr (v50)  (v49)) =>  (case  (sem_expr_exe_cake v50 v84)
  of  None =>  None
  |   ((Some (v48))) =>  (case  (sem_expr_exe_cake v49 v84)
  of  None =>  None
  |   ((Some (v47))) =>  ((Some (v_lsr_cake v48 v47)))))
  |   (E_asr (v54)  (v53)) =>  (case  (sem_expr_exe_cake v54 v84)
  of  None =>  None
  |   ((Some (v52))) =>  (case  (sem_expr_exe_cake v53 v84)
  of  None =>  None
  |   ((Some (v51))) =>  ((Some (v_asr_cake v52 v51)))))
  |   (E_eq (v58)  (v57)) =>  (case  (sem_expr_exe_cake v58 v84)
  of  None =>  None
  |   ((Some (v56))) =>  (case  (sem_expr_exe_cake v57 v84)
  of  None =>  None
  |   ((Some (v55))) =>  ((Some (v_eq_cake v56 v55)))))
  |   (E_neq (v62)  (v61)) =>  (case  (sem_expr_exe_cake v62 v84)
  of  None =>  None
  |   ((Some (v60))) =>  (case  (sem_expr_exe_cake v61 v84)
  of  None =>  None
  |   ((Some (v59))) =>  ((Some (v_neq_cake v60 v59)))))
  |   (E_lt (v66)  (v65)) =>  (case  (sem_expr_exe_cake v66 v84)
  of  None =>  None
  |   ((Some (v64))) =>  (case  (sem_expr_exe_cake v65 v84)
  of  None =>  None
  |   ((Some (v63))) =>  ((Some (v_lt_cake v64 v63)))))
  |   (E_slt (v70)  (v69)) =>  (case  (sem_expr_exe_cake v70 v84)
  of  None =>  None
  |   ((Some (v68))) =>  (case  (sem_expr_exe_cake v69 v84)
  of  None =>  None
  |   ((Some (v67))) =>  ((Some (v_slt_cake v68 v67)))))
  |   (E_le (v74)  (v73)) =>  (case  (sem_expr_exe_cake v74 v84)
  of  None =>  None
  |   ((Some (v72))) =>  (case  (sem_expr_exe_cake v73 v84)
  of  None =>  None
  |   ((Some (v71))) =>  ((Some (v_le_cake v72 v71)))))
  |   (E_sle (v78)  (v77)) =>  (case  (sem_expr_exe_cake v78 v84)
  of  None =>  None
  |   ((Some (v76))) =>  (case  (sem_expr_exe_cake v77 v84)
  of  None =>  None
  |   ((Some (v75))) =>  ((Some (v_sle_cake v76 v75)))))
  |   (E_comp (v80)) =>  (case  (sem_expr_exe_cake v80 v84)
  of  None =>  None
  |   ((Some (v79))) =>  ((Some (v_comp_cake v79))))
  |   (E_not (v82)) =>  (case  (sem_expr_exe_cake v82 v84)
  of  None =>  None
  |   ((Some (v81))) =>  ((Some (v_not_cake v81))));

     fun  ooo_step_name_cake v9 = 
      (fn  v10 =>
        (fn  v8 =>
          case  (v10,v8)
          of  (v7,v6) =>  (case  v7
          of  ((State_st_list_cake (v5)  (v4)  (v3)  (v2))) =>  (case  (find_instr v6 v5)
          of  None =>  None
          |   ((Some (v1))) =>  (v9 ((State_st_list_cake (v5)  (v4)  (v3)  (v2))) v1)))));

     fun  ooo_exe_list_instr_not_stored_guard_true_sem_instr_cake v12 = 
      (fn  v13 =>
        (fn  v14 =>
          (fn  v15 =>
            case  v12
            of  (State_st_list_cake (v11)  (v10)  (v9)  (v8)) =>  (case  (v13,(v14,v15))
            of  (v7,v6) =>  (case  v7
            of  ((I_assign (v5)  (v4)  (v3))) =>  (case  v6
            of  (v2,v1) =>  ((Ll_lb (v1)  (Act_exe_list)  (v5)),(State_st_list_cake (v11)  (Map.insert v10 v5 v2)  (v9)  (v8)))))))));

     fun  ooo_exe_list_instr_not_stored_guard_true_cake v4 = 
      (fn  v6 =>
        (fn  v5 =>
          case  (sem_instr_exe_cake v4 v5 v6)
          of  None =>  None
          |   (Some (v3)) =>  (case  v3
          of  (v2,v1) =>  ((Some (ooo_exe_list_instr_not_stored_guard_true_sem_instr_cake v6 v5 v2 v1))))));

     fun  ooo_exe_list_instr_not_stored_cake v11 = 
      (fn  v12 =>
        (fn  v13 =>
          case  (v12,v13)
          of  (v10,v9) =>  (case  v10
          of  ((State_st_list_cake (v8)  (v7)  (v6)  (v5))) =>  (case  v9
          of  ((I_assign (v4)  (v3)  (v2))) =>  (case  (v11 v3 v7)
          of  None =>  None
          |   ((Some (v1))) =>  (if  ((v1 = val_false) = (0 < 0))
          then  (ooo_exe_list_instr_not_stored_guard_true_cake v11 ((State_st_list_cake (v8)  (v7)  (v6)  (v5))) ((I_assign (v4)  (v3)  (v2))))
          else  None))))));

     fun  ooo_exe_list_instr_cake v11 = 
      (fn  v12 =>
        (fn  v13 =>
          case  (v12,v13)
          of  (v10,v9) =>  (case  v10
          of  ((State_st_list_cake (v8)  (v7)  (v6)  (v5))) =>  (case  v9
          of  ((I_assign (v4)  (v3)  (v2))) =>  (case  (Map.lookup v7 v4)
          of  None =>  (ooo_exe_list_instr_not_stored_cake v11 ((State_st_list_cake (v8)  (v7)  (v6)  (v5))) ((I_assign (v4)  (v3)  (v2))))
          |   ((Some (v1))) =>  None)))));

     fun  ooo_exe_list_cake v1 = 
      ooo_step_name_cake (ooo_exe_list_instr_cake v1);

     fun  ooo_cmt_list_stored_incomplete_cake v15 = 
      (fn  v16 =>
        (fn  v17 =>
          (fn  v18 =>
            (fn  v19 =>
              case  (v16,(v17,(v18,v19)))
              of  (v14,v13) =>  (case  v14
              of  ((State_st_list_cake (v12)  (v11)  (v10)  (v9))) =>  (case  v13
              of  (v8,v7) =>  (case  v7
              of  (v6,v5) =>  (case  (Map.lookup v11 v6)
              of  None =>  None
              |   ((Some (v4))) =>  (case  (Map.lookup v11 v5)
              of  None =>  None
              |   ((Some (v3))) =>  (case  (str_may_list_cake v15 ((State_st_list_cake (v12)  (v11)  (v10)  (v9))) v8)
              of  []  =>  (let val  x =
                ((Ll_lb ((Obs_ds (v4)))  ((Act_cmt_list (v4)  (v3)))  (v8)),(State_st_list_cake (v12)  (v11)  (v8::v10)  (v9)))
              in
                (Some (x))
              end)
              |   (v2::v1) =>  (if  (List.member (max_bound_name_list (v2::v1)) v10)
              then  (let val  x =
                ((Ll_lb ((Obs_ds (v4)))  ((Act_cmt_list (v4)  (v3)))  (v8)),(State_st_list_cake (v12)  (v11)  (v8::v10)  (v9)))
              in
                (Some (x))
              end)
              else  None)))))))))));

     fun  ooo_cmt_list_stored_cake v11 = 
      (fn  v12 =>
        (fn  v13 =>
          (fn  v14 =>
            (fn  v15 =>
              case  (v12,(v13,(v14,v15)))
              of  (v10,v9) =>  (case  v10
              of  ((State_st_list_cake (v8)  (v7)  (v6)  (v5))) =>  (case  v9
              of  (v4,v3) =>  (case  v3
              of  (v2,v1) =>  (if  (List.member v4 v6)
              then  None
               else  (ooo_cmt_list_stored_incomplete_cake v11 ((State_st_list_cake (v8)  (v7)  (v6)  (v5))) v4 v2 v1)))))))));

     fun  ooo_cmt_list_instr_cake v15 = 
      (fn  v16 =>
        (fn  v17 =>
          case  v16
          of  (State_st_list_cake (v14)  (v13)  (v12)  (v11)) =>  (case  v17
          of  ((I_assign (v10)  (v9)  (v8))) =>  (case  v8
          of  ((O_internal (v1))) =>  None
          |   ((O_load (v3)  (v2))) =>  None
          |   ((O_store (v7)  (v6)  (v5))) =>  (case  v7
          of  Res_pc =>  None
          |   Res_reg =>  None
          |   Res_mem =>  (case  (Map.lookup v13 v10)
          of  None =>  None
          |   ((Some (v4))) =>  (ooo_cmt_list_stored_cake v15 ((State_st_list_cake (v14)  (v13)  (v12)  (v11))) v10 v6 v5)))))));

     fun  ooo_cmt_list_cake v1 = 
      ooo_step_name_cake (ooo_cmt_list_instr_cake v1);

     fun  ooo_ftc_list_stored_incomplete_cake v15 = 
      (fn  v16 =>
        (fn  v17 =>
          (fn  v18 =>
            (fn  v19 =>
              case  (v16,(v17,(v18,v19)))
              of  (v14,v13) =>  (case  v13
              of  (v12,v11) =>  (case  v12
              of  ((State_st_list_cake (v10)  (v9)  (v8)  (v7))) =>  (case  v11
              of  (v6,v5) =>  (case  (str_may_list_cake v14 ((State_st_list_cake (v10)  (v9)  (v8)  (v7))) v6)
              of  []  =>  (let val  v1 = v15 v5 (max_bound_name_list v10)
              in
                let val  x =
                ((Ll_lb ((Obs_il (v5)))  ((Act_ftc_list (v1)))  (v6)),(State_st_list_cake (v10 @ v1)  (v9)  (v8)  (v6::v7)))
              in
                (Some (x))
              end
               end)
              |   (v4::v3) =>  (if  (List.member (max_bound_name_list (v4::v3)) v7)
              then  (let val  v2 = v15 v5 (max_bound_name_list v10)
              in
                let val  x =
                ((Ll_lb ((Obs_il (v5)))  ((Act_ftc_list (v2)))  (v6)),(State_st_list_cake (v10 @ v2)  (v9)  (v8)  (v6::v7)))
              in
                (Some (x))
              end
               end)
              else  None)))))))));

     fun  ooo_ftc_list_stored_cake v11 = 
      (fn  v12 =>
        (fn  v13 =>
          (fn  v14 =>
            (fn  v15 =>
              case  (v12,(v13,(v14,v15)))
              of  (v10,v9) =>  (case  v9
              of  (v8,v7) =>  (case  v8
              of  ((State_st_list_cake (v6)  (v5)  (v4)  (v3))) =>  (case  v7
              of  (v2,v1) =>  (if  (List.member v2 v3)
              then  None
               else  (ooo_ftc_list_stored_incomplete_cake v11 v10 ((State_st_list_cake (v6)  (v5)  (v4)  (v3))) v2 v1)))))))));

     fun  ooo_ftc_list_instr_cake v15 = 
      (fn  v16 =>
        (fn  v17 =>
          (fn  v18 =>
            case  v17
            of  (State_st_list_cake (v14)  (v13)  (v12)  (v11)) =>  (case  v18
            of  ((I_assign (v10)  (v9)  (v8))) =>  (case  v8
            of  ((O_internal (v1))) =>  None
            |   ((O_load (v3)  (v2))) =>  None
            |   ((O_store (v7)  (v6)  (v5))) =>  (case  v7
            of  Res_pc =>  (case  (Map.lookup v13 v10)
            of  None =>  None
            |   ((Some (v4))) =>  (ooo_ftc_list_stored_cake v15 v16 ((State_st_list_cake (v14)  (v13)  (v12)  (v11))) v10 v4))
            |   Res_reg =>  None
            |   Res_mem =>  None))))));

     fun  ooo_ftc_list_cake v1 = 
      (fn  v2 => ooo_step_name_cake (ooo_ftc_list_instr_cake v1 v2));

     fun  ooo_step_list_instr_cake v19 = 
      (fn  v20 =>
        (fn  v21 =>
          (fn  v22 =>
            case  (v20,(v21,v22))
            of  (v18,v17) =>  (case  v17
            of  (v16,v15) =>  (case  v16
            of  ((State_st_list_cake (v14)  (v13)  (v12)  (v11))) =>  (case  v15
            of  ((I_assign (v10)  (v9)  (v8))) =>  (case  (Map.lookup v13 v10)
            of  None =>  (ooo_exe_list_instr_not_stored_cake v18 ((State_st_list_cake (v14)  (v13)  (v12)  (v11))) ((I_assign (v10)  (v9)  (v8))))
            |   ((Some (v7))) =>  (case  v8
            of  ((O_internal (v1))) =>  None
            |   ((O_load (v3)  (v2))) =>  None
            |   ((O_store (v6)  (v5)  (v4))) =>  (case  v6
            of  Res_pc =>  (ooo_ftc_list_stored_cake v19 v18 ((State_st_list_cake (v14)  (v13)  (v12)  (v11))) v10 v7)
            |   Res_reg =>  None
            |   Res_mem =>  (ooo_cmt_list_stored_cake v18 ((State_st_list_cake (v14)  (v13)  (v12)  (v11))) v10 v5 v4))))))))));

     fun  ooo_step_list_cake v1 = 
      (fn  v2 => ooo_step_name_cake (ooo_step_list_instr_cake v1 v2));

     fun  io_bounded_execution_acc_cake v50 v51 v52 v53 v54 v55 =
  case  (v51,(v52,(v53,(v54,v55))))
  of  (v49,v48) =>  (case  v48
  of  (v47,v46) =>  (case  v47
  of  ((State_st_list_cake (v45)  (v44)  (v43)  (v42))) =>  (case  v46
  of  (v41,v40) =>  (case  v40
  of  (v39,v38) =>  (if  (v39 = 0)
  then  ((Some (v38)))
  else  (case  (List.drop v45 v41)
  of  []  =>  ((Some (v38)))
  |   (v37::v36) =>  (case  v37
  of  ((I_assign (v35)  (v34)  (v33))) =>  (case  (Map.lookup v44 v35)
  of  None =>  (case  (v49 v34 v44)
  of  None =>  None
  |   ((Some (v19))) =>  (if  ((v19 = val_false) = (0 < 0))
  then  (case  (sem_instr_exe_cake v49 ((I_assign (v35)  (v34)  (v33))) ((State_st_list_cake (v45)  (v44)  (v43)  (v42))))
  of  None =>  None
  |   ((Some (v18))) =>  (case  v18
  of  (v17,v16) =>  (let val  v15 =
    ooo_exe_list_instr_not_stored_guard_true_sem_instr_cake ((State_st_list_cake (v45)  (v44)  (v43)  (v42))) ((I_assign (v35)  (v34)  (v33))) v17 v16
   in
    case  v15
  of  (v14,v13) =>  (case  v33
  of  ((O_internal (v1))) =>  (io_bounded_execution_acc_cake v50 v49 v13 (v41 + 1) (let val  k =
    v39 - 1
   in
    if  (k < 0)
  then  0
   else  k
   end) (v38 @ (((State_st_list_cake (v45)  (v44)  (v43)  (v42)),(v14,v13))::[] )))
  |   ((O_load (v3)  (v2))) =>  (io_bounded_execution_acc_cake v50 v49 v13 (v41 + 1) (let val  k =
    v39 - 1
   in
    if  (k < 0)
  then  0
   else  k
   end) (v38 @ (((State_st_list_cake (v45)  (v44)  (v43)  (v42)),(v14,v13))::[] )))
  |   ((O_store (v12)  (v11)  (v10))) =>  (case  v12
  of  Res_pc =>  (case  (ooo_ftc_list_stored_cake v50 v49 v13 v35 v17)
  of  None =>  None
  |   ((Some (v6))) =>  (case  v6
  of  (v5,v4) =>  (io_bounded_execution_acc_cake v50 v49 v4 (v41 + 1) (let val  k =
    v39 - 1
   in
    if  (k < 0)
  then  0
   else  k
   end) (v38 @ (((State_st_list_cake (v45)  (v44)  (v43)  (v42)),(v14,v13))::(v13,(v5,v4))::[] )))))
  |   Res_reg =>  (io_bounded_execution_acc_cake v50 v49 v13 (v41 + 1) (let val  k =
    v39 - 1
   in
    if  (k < 0)
  then  0
   else  k
   end) (v38 @ (((State_st_list_cake (v45)  (v44)  (v43)  (v42)),(v14,v13))::[] )))
  |   Res_mem =>  (case  (ooo_cmt_list_stored_cake v49 v13 v35 v11 v10)
  of  None =>  None
  |   ((Some (v9))) =>  (case  v9
  of  (v8,v7) =>  (io_bounded_execution_acc_cake v50 v49 v7 (v41 + 1) (let val  k =
    v39 - 1
   in
    if  (k < 0)
  then  0
   else  k
   end) (v38 @ (((State_st_list_cake (v45)  (v44)  (v43)  (v42)),(v14,v13))::(v13,(v8,v7))::[] )))))))
  end)))
  else  (io_bounded_execution_acc_cake v50 v49 ((State_st_list_cake (v45)  (v44)  (v43)  (v42))) (v41 + 1) (let val  k =
    v39 - 1
   in
    if  (k < 0)
  then  0
   else  k
   end) v38)))
  |   ((Some (v32))) =>  (case  v33
  of  ((O_internal (v20))) =>  (io_bounded_execution_acc_cake v50 v49 ((State_st_list_cake (v45)  (v44)  (v43)  (v42))) (v41 + 1) (let val  k =
    v39 - 1
   in
    if  (k < 0)
  then  0
   else  k
   end) v38)
  |   ((O_load (v22)  (v21))) =>  (io_bounded_execution_acc_cake v50 v49 ((State_st_list_cake (v45)  (v44)  (v43)  (v42))) (v41 + 1) (let val  k =
    v39 - 1
   in
    if  (k < 0)
  then  0
   else  k
   end) v38)
  |   ((O_store (v31)  (v30)  (v29))) =>  (case  v31
  of  Res_pc =>  (if  (List.member v35 v42)
  then  (io_bounded_execution_acc_cake v50 v49 ((State_st_list_cake (v45)  (v44)  (v43)  (v42))) (v41 + 1) (let val  k =
    v39 - 1
   in
    if  (k < 0)
  then  0
   else  k
   end) v38)
  else  (case  (ooo_ftc_list_stored_incomplete_cake v50 v49 ((State_st_list_cake (v45)  (v44)  (v43)  (v42))) v35 v32)
  of  None =>  None
  |   ((Some (v25))) =>  (case  v25
  of  (v24,v23) =>  (io_bounded_execution_acc_cake v50 v49 v23 (v41 + 1) (let val  k =
    v39 - 1
   in
    if  (k < 0)
  then  0
   else  k
   end) (v38 @ (((State_st_list_cake (v45)  (v44)  (v43)  (v42)),(v24,v23))::[] ))))))
  |   Res_reg =>  (io_bounded_execution_acc_cake v50 v49 ((State_st_list_cake (v45)  (v44)  (v43)  (v42))) (v41 + 1) (let val  k =
    v39 - 1
   in
    if  (k < 0)
  then  0
   else  k
   end) v38)
  |   Res_mem =>  (if  (List.member v35 v43)
  then  (io_bounded_execution_acc_cake v50 v49 ((State_st_list_cake (v45)  (v44)  (v43)  (v42))) (v41 + 1) (let val  k =
    v39 - 1
   in
    if  (k < 0)
  then  0
   else  k
   end) v38)
  else  (case  (ooo_cmt_list_stored_incomplete_cake v49 ((State_st_list_cake (v45)  (v44)  (v43)  (v42))) v35 v30 v29)
  of  None =>  None
  |   ((Some (v28))) =>  (case  v28
  of  (v27,v26) =>  (io_bounded_execution_acc_cake v50 v49 v26 (v41 + 1) (let val  k =
    v39 - 1
   in
    if  (k < 0)
  then  0
   else  k
   end) (v38 @ (((State_st_list_cake (v45)  (v44)  (v43)  (v42)),(v27,v26))::[] ))))))))))))))));

     fun  io_bounded_execution_cake v2 = 
      (fn  v1 =>
        (fn  v5 =>
          (fn  v4 =>
            (fn  v3 =>
              io_bounded_execution_acc_cake v2 v1 v5 (pre v4) v3 [] ))));

     fun  io_bounded_trace_acc_cake v59 v60 v61 v62 v63 v64 =
  case  (v60,(v61,(v62,(v63,v64))))
  of  (v58,v57) =>  (case  v57
  of  (v56,v55) =>  (case  v56
  of  ((State_st_list_cake (v54)  (v53)  (v52)  (v51))) =>  (case  v55
  of  (v50,v49) =>  (case  v49
  of  (v48,v47) =>  (if  (v48 = 0)
  then  (let val  x = ((State_st_list_cake (v54)  (v53)  (v52)  (v51)),v47)
  in
    (Some (x))
  end)
  else  (case  (List.drop v54 v50)
  of  []  =>  (let val  x =
    ((State_st_list_cake (v54)  (v53)  (v52)  (v51)),v47)
  in
    (Some (x))
  end)
  |   (v46::v45) =>  (case  v46
  of  ((I_assign (v44)  (v43)  (v42))) =>  (case  (Map.lookup v53 v44)
  of  None =>  (case  (v58 v43 v53)
  of  None =>  None
  |   ((Some (v26))) =>  (if  ((v26 = val_false) = (0 < 0))
  then  (case  (sem_instr_exe_cake v58 ((I_assign (v44)  (v43)  (v42))) ((State_st_list_cake (v54)  (v53)  (v52)  (v51))))
  of  None =>  None
  |   ((Some (v25))) =>  (case  v25
  of  (v24,v23) =>  (let val  v22 =
    ooo_exe_list_instr_not_stored_guard_true_sem_instr_cake ((State_st_list_cake (v54)  (v53)  (v52)  (v51))) ((I_assign (v44)  (v43)  (v42))) v24 v23
   in
    case  v22
  of  (v21,v20) =>  (case  v42
  of  ((O_internal (v2))) =>  (let val  v1 = obs_of_ll v21
   in
    if  (obs_visible v1)
  then  (io_bounded_trace_acc_cake v59 v58 v20 (v50 + 1) (let val  k =
    v48 - 1
   in
    if  (k < 0)
  then  0
   else  k
   end) (v47 @ (v1::[] )))
  else  (io_bounded_trace_acc_cake v59 v58 v20 (v50 + 1) (let val  k =
    v48 - 1
   in
    if  (k < 0)
  then  0
   else  k
   end) v47)
  end)
  |   ((O_load (v5)  (v4))) =>  (let val  v3 = obs_of_ll v21
   in
    if  (obs_visible v3)
  then  (io_bounded_trace_acc_cake v59 v58 v20 (v50 + 1) (let val  k =
    v48 - 1
   in
    if  (k < 0)
  then  0
   else  k
   end) (v47 @ (v3::[] )))
  else  (io_bounded_trace_acc_cake v59 v58 v20 (v50 + 1) (let val  k =
    v48 - 1
   in
    if  (k < 0)
  then  0
   else  k
   end) v47)
  end)
  |   ((O_store (v19)  (v18)  (v17))) =>  (case  v19
  of  Res_pc =>  (case  (ooo_ftc_list_stored_cake v59 v58 v20 v44 v24)
  of  None =>  None
  |   ((Some (v10))) =>  (case  v10
  of  (v9,v8) =>  (let val  v7 = obs_of_ll v21
      val  v6 = obs_of_ll v9
   in
    if  (obs_visible v7)
  then  (io_bounded_trace_acc_cake v59 v58 v8 (v50 + 1) (let val  k = v48 - 1
   in
    if  (k < 0)
  then  0
   else  k
   end) (v47 @ (v7::v6::[] )))
  else  (io_bounded_trace_acc_cake v59 v58 v8 (v50 + 1) (let val  k = v48 - 1
   in
    if  (k < 0)
  then  0
   else  k
   end) (v47 @ (v6::[] )))
  end)))
  |   Res_reg =>  (let val  v11 = obs_of_ll v21
   in
    if  (obs_visible v11)
  then  (io_bounded_trace_acc_cake v59 v58 v20 (v50 + 1) (let val  k =
    v48 - 1
   in
    if  (k < 0)
  then  0
   else  k
   end) (v47 @ (v11::[] )))
  else  (io_bounded_trace_acc_cake v59 v58 v20 (v50 + 1) (let val  k =
    v48 - 1
   in
    if  (k < 0)
  then  0
   else  k
   end) v47)
  end)
  |   Res_mem =>  (case  (ooo_cmt_list_stored_cake v58 v20 v44 v18 v17)
  of  None =>  None
  |   ((Some (v16))) =>  (case  v16
  of  (v15,v14) =>  (let val  v13 = obs_of_ll v21
      val  v12 = obs_of_ll v15
   in
    if  (obs_visible v13)
  then  (io_bounded_trace_acc_cake v59 v58 v14 (v50 + 1) (let val  k =
    v48 - 1
   in
    if  (k < 0)
  then  0
   else  k
   end) (v47 @ (v13::v12::[] )))
  else  (io_bounded_trace_acc_cake v59 v58 v14 (v50 + 1) (let val  k =
    v48 - 1
   in
    if  (k < 0)
  then  0
   else  k
   end) (v47 @ (v12::[] )))
  end)))))
  end)))
  else  (io_bounded_trace_acc_cake v59 v58 ((State_st_list_cake (v54)  (v53)  (v52)  (v51))) (v50 + 1) (let val  k =
    v48 - 1
   in
    if  (k < 0)
  then  0
   else  k
   end) v47)))
  |   ((Some (v41))) =>  (case  v42
  of  ((O_internal (v27))) =>  (io_bounded_trace_acc_cake v59 v58 ((State_st_list_cake (v54)  (v53)  (v52)  (v51))) (v50 + 1) (let val  k =
    v48 - 1
   in
    if  (k < 0)
  then  0
   else  k
   end) v47)
  |   ((O_load (v29)  (v28))) =>  (io_bounded_trace_acc_cake v59 v58 ((State_st_list_cake (v54)  (v53)  (v52)  (v51))) (v50 + 1) (let val  k =
    v48 - 1
   in
    if  (k < 0)
  then  0
   else  k
   end) v47)
  |   ((O_store (v40)  (v39)  (v38))) =>  (case  v40
  of  Res_pc =>  (if  (List.member v44 v51)
  then  (io_bounded_trace_acc_cake v59 v58 ((State_st_list_cake (v54)  (v53)  (v52)  (v51))) (v50 + 1) (let val  k =
    v48 - 1
   in
    if  (k < 0)
  then  0
   else  k
   end) v47)
  else  (case  (ooo_ftc_list_stored_incomplete_cake v59 v58 ((State_st_list_cake (v54)  (v53)  (v52)  (v51))) v44 v41)
  of  None =>  None
  |   ((Some (v33))) =>  (case  v33
  of  (v32,v31) =>  (let val  v30 = obs_of_ll v32
   in
    io_bounded_trace_acc_cake v59 v58 v31 (v50 + 1) (let val  k = v48 - 1
   in
    if  (k < 0)
  then  0
   else  k
   end) (v47 @ (v30::[] ))
  end))))
  |   Res_reg =>  (io_bounded_trace_acc_cake v59 v58 ((State_st_list_cake (v54)  (v53)  (v52)  (v51))) (v50 + 1) (let val  k =
    v48 - 1
   in
    if  (k < 0)
  then  0
   else  k
   end) v47)
  |   Res_mem =>  (if  (List.member v44 v52)
  then  (io_bounded_trace_acc_cake v59 v58 ((State_st_list_cake (v54)  (v53)  (v52)  (v51))) (v50 + 1) (let val  k =
    v48 - 1
   in
    if  (k < 0)
  then  0
   else  k
   end) v47)
  else  (case  (ooo_cmt_list_stored_incomplete_cake v58 ((State_st_list_cake (v54)  (v53)  (v52)  (v51))) v44 v39 v38)
  of  None =>  None
  |   ((Some (v37))) =>  (case  v37
  of  (v36,v35) =>  (let val  v34 = obs_of_ll v36
   in
    io_bounded_trace_acc_cake v59 v58 v35 (v50 + 1) (let val  k = v48 - 1
   in
    if  (k < 0)
  then  0
   else  k
   end) (v47 @ (v34::[] ))
  end))))))))))))));

     fun  io_bounded_trace_aux_cake v2 = 
      (fn  v1 =>
        (fn  v5 =>
          (fn  v4 =>
            (fn  v3 => io_bounded_trace_acc_cake v2 v1 v5 (pre v4) v3 [] ))));

     fun  io_bounded_trace_cake v5 = 
      (fn  v4 =>
        (fn  v8 =>
          (fn  v7 =>
            (fn  v6 =>
              case  (io_bounded_trace_aux_cake v5 v4 v8 v7 v6)
              of  None =>  None
              |   (Some (v3)) =>  (case  v3 of  (v2,v1) =>  ((Some (v1))))))));

     end

fun  translate_val_bir_prog_reg_list x0 = 
    (fn  x1 =>
      (fn  x2 =>
        (fn  x3 =>
          (fn  x4 =>
            case  (x1,(x2,(x3,x4)))
            of  (v6,v5) =>  (case  v5
            of  (v4,v3) =>  (case  v3
            of  (v2,v1) =>  (if  (v2 = (Word64.fromInt 0))
            then  ((Mil.I_assign (v1 + 1)  ((Mil.E_val (Mil.val_true)))  ((Mil.O_internal ((Mil.E_val (x0))))))::(Mil.I_assign (v1 + 2)  ((Mil.E_val (Mil.val_true)))  ((Mil.O_load (Mil.Res_reg )  (v1 + 1))))::(Mil.I_assign (v1 + 3)  ((Mil.E_val (Mil.val_true)))  ((Mil.O_internal ((Mil.E_add ((Mil.E_name (v1 + 2)))  ((Mil.E_val ((Word64.fromInt 1)))))))))::(Mil.I_assign (v1 + 4)  ((Mil.E_val (Mil.val_true)))  ((Mil.O_store (Mil.Res_reg )  (v1 + 1)  (v1 + 3))))::(Mil.I_assign (v1 + 5)  ((Mil.E_val (Mil.val_true)))  ((Mil.O_internal ((Mil.E_val (Mil.val_zero))))))::(Mil.I_assign (v1 + 6)  ((Mil.E_val (Mil.val_true)))  ((Mil.O_load (Mil.Res_pc )  (v1 + 5))))::(Mil.I_assign (v1 + 7)  ((Mil.E_val (Mil.val_true)))  ((Mil.O_internal ((Mil.E_add ((Mil.E_name (v1 + 6)))  ((Mil.E_val ((Word64.fromInt 4)))))))))::(Mil.I_assign (v1 + 8)  ((Mil.E_val (Mil.val_true)))  ((Mil.O_store (Mil.Res_pc )  (v1 + 5)  (v1 + 7))))::[] )
            else  (if  (v2 = (Word64.fromInt 4))
            then  ((Mil.I_assign (v1 + 1)  ((Mil.E_val (Mil.val_true)))  ((Mil.O_internal ((Mil.E_val (v4))))))::(Mil.I_assign (v1 + 2)  ((Mil.E_val (Mil.val_true)))  ((Mil.O_load (Mil.Res_reg )  (v1 + 1))))::(Mil.I_assign (v1 + 3)  ((Mil.E_val (Mil.val_true)))  ((Mil.O_internal ((Mil.E_add ((Mil.E_name (v1 + 2)))  ((Mil.E_val ((Word64.fromInt 1)))))))))::(Mil.I_assign (v1 + 4)  ((Mil.E_val (Mil.val_true)))  ((Mil.O_internal ((Mil.E_val (v6))))))::(Mil.I_assign (v1 + 5)  ((Mil.E_val (Mil.val_true)))  ((Mil.O_store (Mil.Res_reg )  (v1 + 4)  (v1 + 3))))::(Mil.I_assign (v1 + 6)  ((Mil.E_val (Mil.val_true)))  ((Mil.O_internal ((Mil.E_val (Mil.val_zero))))))::(Mil.I_assign (v1 + 7)  ((Mil.E_val (Mil.val_true)))  ((Mil.O_load (Mil.Res_pc )  (v1 + 6))))::(Mil.I_assign (v1 + 8)  ((Mil.E_val (Mil.val_true)))  ((Mil.O_internal ((Mil.E_sub ((Mil.E_name (v1 + 7)))  ((Mil.E_val ((Word64.fromInt 4)))))))))::(Mil.I_assign (v1 + 9)  ((Mil.E_val (Mil.val_true)))  ((Mil.O_store (Mil.Res_pc )  (v1 + 6)  (v1 + 8))))::[] )
            else  (raise  Bind)))))))));

   fun  bir_prog_reg_trace v12 = 
    (fn  v13 =>
      (fn  v14 =>
        (fn  v15 =>
          case  v12
          of  (v11,v10) =>  (case  (v13,(v14,v15))
          of  (v9,v8) =>  (case  v9
          of  (v7,v6) =>  (case  v8
          of  (v5,v4) =>  (case  v5
          of  (v3,v2) =>  (let val  v1 =
            Mil.initialize_state_without_pc_fetch_list_cake [] ((v11,v10)::(v7,v6)::(v3,v2)::[] ) Mil.val_zero
           in
            Mil.io_bounded_trace_cake (translate_val_bir_prog_reg_list v11 v7 v3) Mil.sem_expr_exe_cake (fst v1) (snd v1) v4
           end))))))));

   fun  bir_prog_reg_trace_string_app_list v1 = 
    PrettyPrinter.fromOption (PrettyPrinter.fromList Mil.string_app_list_of_obs) (bir_prog_reg_trace (Mil.val_zero,Mil.val_zero) (Mil.val_one,Mil.val_zero) (Mil.val_two,Mil.val_zero) v1);

print_app_list (bir_prog_reg_trace_string_app_list 200);

print "\n";
